#!/bin/bash
set -e

function usage
{
    echo "usage: joynr-docker build | push | pull | remove"
    echo "       [--repository mydockerrepo.org]"
    echo "       [--version versionnumber]"
    echo "       [--additionaltags|-a <comma-separated list of tags>]"
    echo "       [--proxy proxy <http://[username:password@]proxyhost:port>]"
}

repository=
version=latest
command=$1
additionaltags=latest
proxy=
shift
echo "after command: $1"

echo "in params: $1"
# if repository is set, add a single trailing slash
# if it was passed in with the slash, this is removed first
while [ "$1" != "" ]; do
echo "PARAM is: $1"
    case $1 in
        -r | --repository )     shift
                                echo "REPO"
                                repository=${1%/}/
                                ;;
        -v | --version )        shift
                                version="$1"
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        -a | --additionaltags )  shift
                                additionaltags=$1
                                ;;
        -p | --proxy )          shift
                                proxy=$1
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

#list of available images
declare -a normalBuildImages=(
    "joynr-base"
    "joynr-android"
    "joynr-javascript"
    "joynr-cpp-base"
    "joynr-cpp-gcc"
    "joynr-cpp-clang"
    "joynr-ilt-gcc"
    "joynr-complete-deps"
    "joynr-runtime-environment-base"
    "joynr-java-8"
)
declare -a scriptBuildImages=(
    "joynr-gcd-db"
)
declare -a allImages=(
    ${normalBuildImages[@]}
    ${scriptBuildImages[@]}
)

function build
{
    proxy_arg=""
    if [ -n "$proxy" ]
    then
        proxy_arg="--build-arg http_proxy=$proxy"
    fi
    for image in "${normalBuildImages[@]}"
    do
        echo "building image: ${image}:latest"
        docker build $proxy_arg -t ${image}:latest ${image}/
    done
    for image in "${scriptBuildImages[@]}"
    do
        echo "building image: ${image}:latest"
        pushd $image
        ./build_docker_image.sh $proxy_arg
        popd
    done
     
    if [[ "$additionaltags" != "latest" ]] || [[ "$version" != "latest" ]]; then
        for image in "${allImages[@]}"
        do
            IFS=',' read -ra tags <<< "$additionaltags"    #Convert string to array
            tags+=("$version")
            for tag in "${tags[@]}"; do
                echo "tagging image ${repository}${image}:latest with tag ${tag}"
                docker tag ${image}:latest ${repository}${image}:${tag}
                docker tag ${image}:latest ${image}:${tag}
            done
        done
    fi
}

function pull
{
    echo "pulling from repository: $repository for version:$version"
    for image in "${allImages[@]}"
    do
        docker pull ${repository}${image}:${version}
    done
}

function push
{
    echo "pushing to repository: $repository with version:$version"
    for image in "${allImages[@]}"
    do
        docker push ${repository}${image}:${version}

        IFS=',' read -ra tags <<< "$additionaltags"    #Convert string to array

        for tag in "${tags[@]}"; do
            docker push ${repository}${image}:${tag}
        done

    done
}

function remove
{
    echo "removing from repository: $repository version:$version"
    repositoryurl=$repository
    if [[ "$repositoryurl" == *"v2"* ]]
    then
        echo "repository name already equipped with docker specific namespaces. Skipping repository name modification..."
        repository=`echo $repository | cut -d'/' -f1`/`echo $repository | cut -d'/' -f3-`
    else
        repositoryurl=`echo $repository | cut -d'/' -f1`/v2/`echo $repository | cut -d'/' -f2-`
        echo "repository name $repository is not equipped with docker specific namespaces. Modified repository name: $repositoryurl"
    fi
    for image in "${allImages[@]}"
    do
        docker rmi ${repository}${image}:${version}
        digest=`curl -H 'Accept: application/vnd.docker.distribution.manifest.v2+json' -L -s -I https://${repositoryurl}${image}/manifests/${version} | grep 'Docker-Content-Digest' | cut -d':' -f2- | cut -d\  -f2- | tr -d '\r'`
        if [ -z "$digest" ]
        then
            echo "Docker-Content-Digest for docker image ${repository}${image}:${version} not found. Skipping tag removal..."
        else
            echo "Docker-Content-Digest for docker image ${repository}${image}:${version} found: ${digest}. Deleting tag"
            curl --request DELETE -L https://${repositoryurl}${image}/manifests/${digest}
        fi
    done
}

case $command in
    build )                 build
                            exit
                            ;;
    push )                  push
                            exit
                            ;;
    pull )                  pull
                            exit
                            ;;
    remove )                remove
                            exit
                            ;;
    * )                     usage
                            exit 1
esac
