apply plugin: 'com.android.application'
apply plugin: 'io.joynr.tools.generator.joynr-generator-gradle-plugin'

android {
    compileSdkVersion 28
    buildToolsVersion "29.0.0"
    defaultConfig {
        applicationId "io.joynr.androidhelloworldconsumer"
        minSdkVersion 28
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", "HelloWorldConsumer-$versionName")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets.main.java { srcDirs = ["src/main/java", "src/main/generated-java"]}

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'android.arch.lifecycle:extensions:2.0.0'

    implementation "io.joynr.android:libjoynr-android-websocket-runtime:$rootProject.joynrVersion"
}

apply plugin: 'com.github.jk1.dependency-license-report'
import com.github.jk1.license.render.*
import com.github.jk1.license.LicenseReportExtension
import com.github.jk1.license.ManifestData
import com.github.jk1.license.ModuleData
import com.github.jk1.license.PomData
import com.github.jk1.license.ProjectData
class JoynrReportRenderer implements ReportRenderer{
    private Project project
    private LicenseReportExtension config
    private File output
    private String fileName
    JoynrReportRenderer(String filename = 'NOTICES-ANDROID') {
        this.fileName = filename
    }
    @Input
    private String getFileNameCache() { return this.fileName }
    void render(ProjectData data) {
        project = data.project
        config = project.licenseReport
        output = new File(config.outputDir, fileName)
        output.text = "This project has dependencies to:\n"
        printDependencies(data)
    }
    private void printDependencies(ProjectData data) {
        data.allDependencies.unique().sort().each {
            printDependency(it)
        }
    }
    private String printDependency(ModuleData data) {
        if (data.poms.isEmpty() && data.manifests.isEmpty()) {
            output << "No license information found\n"
            return
        }
        if (!data.manifests.isEmpty()) {
            ManifestData manifest = data.manifests.first()
            if (manifest.name && !manifest.name.isEmpty() && !(manifest.name.equalsIgnoreCase("%bundle.name"))) {
                output << " $manifest.name"
            }else {
                output << " $data.group $data.name"
            }
        }else{
            output << " $data.group $data.name"
        }

        if (!data.poms.isEmpty()) {
            PomData pomData = data.poms.first()
            if (pomData.licenses) {
                output << " under " + pomData.licenses.first().name
            }
        }
        // special edge cases
        if (data.manifests && data.manifests.first().name &&
                data.manifests.first().name.equalsIgnoreCase("asm")){
            output << " under BSD"
        }
        output << "\n"
    }
}

licenseReport {
    configurations = ['debugRuntimeClasspath']
    renderers = [new JoynrReportRenderer("NOTICE-ANDROID")]
}
task copyNoticeToRoot(type: Copy) {
    from file("$buildDir/reports/dependency-license/NOTICE-ANDROID")
    into file("../")
}
task generateNotices(type: GradleBuild) {
    tasks = ['clean', 'generateLicenseReport', 'copyNoticeToRoot']
}