/*-
 * #%L
 * %%
 * Copyright (C) 2011 - 2018 BMW Car IT GmbH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package io.joynr.proxy;

import java.lang.reflect.Method;

public interface StatelessAsyncIdCalculator {
    /**
     * Use this method to calculate the participant ID to use for requests for stateless async methods, so that the
     * replies can be routed back to any participant in a cluster making stateless async calls, rather than just the
     * one node it originates from.
     *
     * Implementations must ensure that the result can be interpreted by any node in a cluster. Either by requiring
     * the same config to be used by each node, or by sharing information at runtime between the nodes.
     *
     * @param interfaceName the joynr service interface for which the ID is to be generated.
     * @param statelessAsyncCallback the stateless callback instance which is used for processing the result. Each node
     *                               must register an instance created in the same way which behave identically at startup.
     * @return the participant ID to be used for stateless async requests.
     */
    String calculateParticipantId(String interfaceName, StatelessAsyncCallback statelessAsyncCallback);

    /**
     * This method will calculate an identifier for a given stateless callback instance using the interface name of the
     * joynr service and the use case of the stateless async callback instance in order to allow the joynr system to
     * identify which callback instance should be used for a reply to a stateless async request.
     *
     * @param interfaceName the joynr service interface for which the ID is to be generated.
     * @param statelessAsyncCallback the stateless callback instance which is used for processing the result. Each node
     *                               must register an instance created in the same way which behave identically at startup.
     * @return a string which uniquely identifies a given stateless async callback.
     */
    String calculateStatelessCallbackId(String interfaceName, StatelessAsyncCallback statelessAsyncCallback);

    /**
     * This method returns the unique ID of the callback method to use for handling the reply. See also
     * {@link io.joynr.dispatcher.rpc.annotation.StatelessCallbackCorrelation}.
     *
     * The method ID is ascertained by looking for the correlation annotation on the method, which during generation is
     * calculated from the callback method signature and added to both the service interface and the callback interface
     * methods.
     *
     * @param method the method being called for which the ID of the callback method should be added to the result.
     * @return the unique method ID of the stateless async callback method to use for handling replies.
     */
    String calculateStatelessCallbackMethodId(Method method);

    /**
     * Utility method to strip the method-specific information from an ID generated with
     * {@link #calculateStatelessCallbackMethodId(Method)}
     * in order to derive the {@link #calculateStatelessCallbackId(String, StatelessAsyncCallback)} ID so that the
     * correct reply callback can be looked up from the reply caller directory.
     *
     * @param statelessCallback the stateless callback ID with method information as generated by
     * {@link #calculateStatelessCallbackMethodId(Method)}
     * @return the stateless callback ID *without* method information as generated by
     * {@link #calculateStatelessCallbackId(String, StatelessAsyncCallback)}
     */
    String withoutMethod(String statelessCallback);

    /**
     * Reverse-engineers the full stateless callback ID from the participant ID previously created with
     * {@link #calculateParticipantId(String, StatelessAsyncCallback)} and the method ID calculated with
     * {@link #calculateStatelessCallbackMethodId(Method)} which can then be added to the reply.
     * This way, we can reconstitute the full stateless callback ID required for routing in the joynr runtime from
     * the participant ID and method ID, where the latter is transmitted via a custom header in the joynr message. This
     * way we don't need to bloat the payload or headers with duplicate information, as the participant ID already
     * contains the interface name and use case.
     *
     * @param statelessParticipantId the particpant ID
     * @param methodId the method ID
     * @return the stateless callback ID including method suffix.
     */
    String fromParticpantAndMethod(String statelessParticipantId, String methodId);
}
