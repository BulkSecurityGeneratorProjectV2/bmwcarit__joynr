package io.joynr.capabilities;

/*
 * #%L
 * %%
 * Copyright (C) 2011 - 2013 BMW Car IT GmbH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;
import io.joynr.common.JoynrPropertiesModule;
import io.joynr.discovery.DiscoveryClientModule;
import io.joynr.dispatcher.RequestReplyDispatcher;
import io.joynr.dispatcher.RequestReplySender;
import io.joynr.dispatcher.rpc.JoynrMessagingConnectorFactory;
import io.joynr.dispatcher.rpc.JoynrInterface;
import io.joynr.endpoints.EndpointAddressBase;
import io.joynr.endpoints.JoynrMessagingEndpointAddress;
import io.joynr.messaging.MessagingPropertyKeys;
import io.joynr.messaging.MessagingSettings;
import io.joynr.proxy.ProxyBuilderDefaultImpl;
import io.joynr.pubsub.PubSubModule;
import io.joynr.runtime.JoynrBaseModule;
import io.joynr.runtime.JoynrInjectorFactory;
import io.joynr.runtime.JoynrRuntime;

import java.util.List;

import joynr.types.CapabilityInformation;
import joynr.types.CustomParameter;
import joynr.types.ProviderQos;
import joynr.types.ProviderScope;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;

import com.google.common.collect.Lists;
import com.google.inject.AbstractModule;
import com.google.inject.Injector;
import com.google.inject.Provides;
import com.google.inject.Singleton;

@RunWith(MockitoJUnitRunner.class)
public class LocalCapabilitiesDirectoryTests {
    @Mock
    JoynrRuntime runtime;

    private LocalCapabilitiesDirectory localCapabilitiesDirectory;
    @Mock
    private GlobalCapabilitiesDirectoryClient capabilitiesClient;

    @Mock
    RequestReplyDispatcher dispatcher;
    @Mock
    RequestReplySender sender;

    @Mock
    MessagingSettings settings;

    private CapabilityEntry capabilityEntry;
    private CapabilityInformation capabilityInformation;
    private Injector injector;
    public static final String interfaceName = "interfaceName";

    public interface TestInterface extends JoynrInterface {
        public static final String INTERFACE_NAME = interfaceName;
    }

    @SuppressWarnings("unchecked")
    @Before
    public void setUp() {

        String channelId = "testChannelId";
        AbstractModule capabilitiesModule = new AbstractModule() {

        JoynrInjectorFactory applicationFactory = new JoynrInjectorFactory(new JoynrBaseModule(factoryProperties,
                                                                                               Modules.override(new PubSubModule(),
                                                                                                                new DiscoveryClientModule(),
                                                                                                                new JoynrPropertiesModule(factoryProperties),
                                                                                                                new AbstractModule() {
                                                                                                                    @Override
                                                                                                                    protected void configure() {
                                                                                                                        bind(JoynrRuntime.class).toInstance(runtime);
                                                                                                                        bind(RequestReplyDispatcher.class).toInstance(dispatcher);
                                                                                                                        bind(RequestReplySender.class).toInstance(sender);
                                                                                                                        bind(MessagingSettings.class).toInstance(settings);
                                                                                                                        requestStaticInjection(JoynrMessagingConnectorFactory.class);
                                                                                                                    }

                                                                                                                })
                                                                                                      .with(new AbstractModule() {

                                                                                                          @Override
                                                                                                          protected void configure() {
                                                                                                          }

                                                                                                          @Provides
                                                                                                          @Singleton
                                                                                                          @SuppressWarnings("unused")
                                                                                                          // suppress warnings needed on the build server
                                                                                                          public GlobalCapabilitiesDirectoryClient provideCapabilitiesDirectoryClient(LocalCapabilitiesDirectory mylocalCapabilitiesDirectory,
                                                                                                                                                                                      RequestReplySender messageSender,
                                                                                                                                                                                      RequestReplyDispatcher mydispatcher) {
                                                                                                              // overrides
                                                                                                              // the
                                                                                                              // provider
                                                                                                              // for the
                                                                                                              // capabilities
                                                                                                              // client
                                                                                                              // with mock
                                                                                                              // provider
                                                                                                              return capabilitiesClient;
                                                                                                          }
                                                                                                      })));

        JoynInjectorFactory applicationFactory = new JoynInjectorFactory(bindMyInstancesModule, capabilitiesModule);

        injector = applicationFactory.getInjector();
        localCapabilitiesDirectory = injector.getInstance(LocalCapabilitiesDirectory.class);

        when(runtime.getProxyBuilder(any(String.class), any(Class.class))).thenReturn(new ProxyBuilderDefaultImpl<TestInterface>(localCapabilitiesDirectory,
                                                                                                                                 "domain",
                                                                                                                                 TestInterface.class,
                                                                                                                                 null,
                                                                                                                                 null,
                                                                                                                                 null));

        ProviderQos providerQos = new ProviderQos();
        List<CustomParameter> parameterList = Lists.newArrayList();
        parameterList.add(new CustomParameter("key1", "value1"));
        parameterList.add(new CustomParameter("key2", "value2"));
        providerQos.setCustomParameters(parameterList);

        EndpointAddressBase endpointAddress = new JoynrMessagingEndpointAddress(channelId);
        String participantId = "testParticipantId";
        String domain = "domain";
        capabilityEntry = new CapabilityEntry(domain,
                                              TestInterface.class,
                                              providerQos,
                                              endpointAddress,
                                              participantId,
                                              CapabilityScope.LOCALONLY);
        capabilityInformation = new CapabilityInformation(domain,
                                                          TestInterface.INTERFACE_NAME,
                                                          providerQos,
                                                          channelId,
                                                          participantId);
    }

    @Test
    public void addCapability() throws InterruptedException {

        RegistrationFuture future = localCapabilitiesDirectory.addCapability(capabilityEntry);
        future.waitForFullRegistration(200);
        Mockito.verify(capabilitiesClient).registerCapability(capabilityInformation);
    }

    @Test
    public void addLocalOnlyCapability() throws InterruptedException {

        ProviderQos providerQos = new ProviderQos();
        providerQos.setScope(ProviderScope.LOCAL);

        capabilityInformation = new CapabilityInformation("test",
                                                          TestInterface.INTERFACE_NAME,
                                                          providerQos,
                                                          "chan",
                                                          "participantId");

        RegistrationFuture future = localCapabilitiesDirectory.addCapability(capabilityEntry);
        future.waitForFullRegistration(10000);
        Mockito.verify(capabilitiesClient, Mockito.never()).registerCapability(capabilityInformation);
    }

    @Test
    public void removeCapabilities() throws InterruptedException {
        RegistrationFuture future = localCapabilitiesDirectory.addCapability(capabilityEntry);
        future.waitForLocalRegistration(10000);
        localCapabilitiesDirectory.removeCapability(capabilityEntry);
        Mockito.verify(capabilitiesClient).unregisterCapability(Mockito.eq(capabilityInformation));
    }

}
