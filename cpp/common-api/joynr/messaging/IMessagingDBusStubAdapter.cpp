/*
* This file was generated by the CommonAPI Generators.
*
*/
#include "IMessagingDBusStubAdapter.h"
#include <joynr/messaging/IMessaging.h>

namespace joynr {
namespace messaging {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createIMessagingDBusStubAdapter(
                   const std::string& commonApiAddress,
                   const std::string& interfaceName,
                   const std::string& busName,
                   const std::string& objectPath,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection,
                   const std::shared_ptr<CommonAPI::StubBase>& stubBase) {
    return std::make_shared<IMessagingDBusStubAdapter>(commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection, stubBase);
}

__attribute__((constructor)) void registerIMessagingDBusStubAdapter(void) {
    CommonAPI::DBus::DBusFactory::registerAdapterFactoryMethod(IMessaging::getInterfaceId(),
                                                               &createIMessagingDBusStubAdapter);
}

IMessagingDBusStubAdapter::IMessagingDBusStubAdapter(
        const std::string& commonApiAddress,
        const std::string& dbusInterfaceName,
        const std::string& dbusBusName,
        const std::string& dbusObjectPath,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
        const std::shared_ptr<CommonAPI::StubBase>& stub):
        IMessagingDBusStubAdapterHelper(commonApiAddress, dbusInterfaceName, dbusBusName, dbusObjectPath, dbusConnection, std::dynamic_pointer_cast<IMessagingStub>(stub)) {
}

const char* IMessagingDBusStubAdapter::getMethodsDBusIntrospectionXmlData() const {
    return
        "<method name=\"transmit\">\n"
            "<arg name=\"message\" type=\"(sa{ss}s)\" direction=\"in\" />\n"
            "<arg name=\"qos\" type=\"(x)\" direction=\"in\" />\n"
        "</method>\n"
    ;
}



static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    IMessagingStub,
    std::tuple<IMessaging::JoynrMessage, types::Types::JoynrMessageQos>,
    std::tuple<>
    > transmitStubDispatcher(&IMessagingStub::transmit, "");


template<>
const IMessagingDBusStubAdapterHelper::StubDispatcherTable IMessagingDBusStubAdapterHelper::stubDispatcherTable_ = {
    { { "transmit", "(sa{ss}s)(x)" }, &joynr::messaging::transmitStubDispatcher }
};



} // namespace messaging
} // namespace joynr
