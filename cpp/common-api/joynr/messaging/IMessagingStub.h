/*
* This file was generated by the CommonAPI Generators.
*
*/
#ifndef JOYNR_MESSAGING_I_Messaging_STUB_H_
#define JOYNR_MESSAGING_I_Messaging_STUB_H_

#include <cstdint>
#include <joynr/messaging/types/Types.h>
#include <CommonAPI/InputStream.h>
#include <string>
#include <CommonAPI/SerializableStruct.h>
#include <CommonAPI/OutputStream.h>
#include "IMessaging.h"
#include <CommonAPI/Stub.h>

namespace joynr {
namespace messaging {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service IMessaging. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class IMessagingStubAdapter: virtual public CommonAPI::StubAdapter, public IMessaging {
 public:

};


/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for IMessaging.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class IMessagingStubRemoteEvent {
 public:
    virtual ~IMessagingStubRemoteEvent() { }

};


/**
 * Defines the interface that must be implemented by any class that should provide
 * the service IMessaging to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class IMessagingStub : public CommonAPI::Stub<IMessagingStubAdapter , IMessagingStubRemoteEvent> {
 public:
    virtual ~IMessagingStub() { }


    /// This is the method that will be called on remote calls on the method transmit.
    virtual void transmit(IMessaging::JoynrMessage message, types::Types::JoynrMessageQos qos) = 0;
    
};

} // namespace messaging
} // namespace joynr

#endif // JOYNR_MESSAGING_I_Messaging_STUB_H_
