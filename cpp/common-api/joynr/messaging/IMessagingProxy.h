/*
* This file was generated by the CommonAPI Generators.
*
*/
#ifndef JOYNR_MESSAGING_I_Messaging_PROXY_H_
#define JOYNR_MESSAGING_I_Messaging_PROXY_H_

#include "IMessagingProxyBase.h"

namespace joynr {
namespace messaging {

template <typename ... _AttributeExtensions>
class IMessagingProxy: virtual public IMessaging, virtual public IMessagingProxyBase, public _AttributeExtensions... {
 public:
    IMessagingProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~IMessagingProxy();




    /**
     * Calls transmit with synchronous semantics.
     * 
     * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     * Synchronous calls are not supported (will block indefinitely) when mainloop integration is used.
     */
    virtual void transmit(const IMessaging::JoynrMessage& message, const types::Types::JoynrMessageQos& qos, CommonAPI::CallStatus& callStatus);
    /**
     * Calls transmit with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> transmitAsync(const IMessaging::JoynrMessage& message, const types::Types::JoynrMessageQos& qos, TransmitAsyncCallback callback);

    /// Returns the CommonAPI address of the remote partner this proxy communicates with.
    virtual std::string getAddress() const;

    /// Returns the domain of the remote partner this proxy communicates with.
    virtual const std::string& getDomain() const;

    /// Returns the service ID of the remote partner this proxy communicates with.
    virtual const std::string& getServiceId() const;

    /// Returns the instance ID of the remote partner this proxy communicates with.
    virtual const std::string& getInstanceId() const;

    /// Returns true if the remote partner for this proxy is available.
    virtual bool isAvailable() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<IMessagingProxyBase> delegate_;
};


//
// IMessagingProxy Implementation
//
template <typename ... _AttributeExtensions>
IMessagingProxy<_AttributeExtensions...>::IMessagingProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        delegate_(std::dynamic_pointer_cast<IMessagingProxyBase>(delegate)),
        _AttributeExtensions(*(std::dynamic_pointer_cast<IMessagingProxyBase>(delegate)))... {
}

template <typename ... _AttributeExtensions>
IMessagingProxy<_AttributeExtensions...>::~IMessagingProxy() {
}



template <typename ... _AttributeExtensions>
void IMessagingProxy<_AttributeExtensions...>::transmit(const IMessaging::JoynrMessage& message, const types::Types::JoynrMessageQos& qos, CommonAPI::CallStatus& callStatus) {
    delegate_->transmit(message, qos, callStatus);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> IMessagingProxy<_AttributeExtensions...>::transmitAsync(const IMessaging::JoynrMessage& message, const types::Types::JoynrMessageQos& qos, TransmitAsyncCallback callback) {
    return delegate_->transmitAsync(message, qos, callback);
}


template <typename ... _AttributeExtensions>
std::string IMessagingProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
const std::string& IMessagingProxy<_AttributeExtensions...>::getDomain() const {
    return delegate_->getDomain();
}

template <typename ... _AttributeExtensions>
const std::string& IMessagingProxy<_AttributeExtensions...>::getServiceId() const {
    return delegate_->getServiceId();
}

template <typename ... _AttributeExtensions>
const std::string& IMessagingProxy<_AttributeExtensions...>::getInstanceId() const {
    return delegate_->getInstanceId();
}

template <typename ... _AttributeExtensions>
bool IMessagingProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& IMessagingProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& IMessagingProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}

} // namespace messaging
} // namespace joynr



#endif // JOYNR_MESSAGING_I_Messaging_PROXY_H_
