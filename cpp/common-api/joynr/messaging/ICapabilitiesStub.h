/*
* This file was generated by the CommonAPI Generators.
*
*/
#ifndef JOYNR_MESSAGING_I_Capabilities_STUB_H_
#define JOYNR_MESSAGING_I_Capabilities_STUB_H_

#include <cstdint>
#include <joynr/messaging/types/Types.h>
#include <vector>
#include <CommonAPI/InputStream.h>
#include <string>
#include <CommonAPI/SerializableStruct.h>
#include <CommonAPI/OutputStream.h>
#include "ICapabilities.h"
#include <CommonAPI/Stub.h>

namespace joynr {
namespace messaging {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service ICapabilities. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class ICapabilitiesStubAdapter: virtual public CommonAPI::StubAdapter, public ICapabilities {
 public:

};


/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for ICapabilities.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ICapabilitiesStubRemoteEvent {
 public:
    virtual ~ICapabilitiesStubRemoteEvent() { }

};


/**
 * Defines the interface that must be implemented by any class that should provide
 * the service ICapabilities to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ICapabilitiesStub : public CommonAPI::Stub<ICapabilitiesStubAdapter , ICapabilitiesStubRemoteEvent> {
 public:
    virtual ~ICapabilitiesStub() { }


    /// This is the method that will be called on remote calls on the method add.
    virtual void add(std::string domain, std::string interfaceName, std::string participantId, types::Types::ProviderQos qos, types::Types::EndpointAddressList endpointAddressList, types::Types::EndpointAddressBase messagingStubAddress, int64_t timeout_ms) = 0;
    /// This is the method that will be called on remote calls on the method addEndPoint.
    virtual void addEndPoint(std::string participantId, types::Types::EndpointAddressBase messagingStubAddress, int64_t timeout_ms) = 0;
    /// This is the method that will be called on remote calls on the method lookup1.
    virtual void lookup1(std::string domain, std::string interfaceName, types::Types::ProviderQosRequirement qos, types::Types::DiscoveryQos discoveryQos, types::Types::CapabilityEntryList& result) = 0;
    /// This is the method that will be called on remote calls on the method lookup2.
    virtual void lookup2(std::string participandId, types::Types::DiscoveryQos discoveryQos, types::Types::CapabilityEntryList& result) = 0;
    /// This is the method that will be called on remote calls on the method remove.
    virtual void remove(std::string participantId, int64_t timeout_ms) = 0;
    
};

} // namespace messaging
} // namespace joynr

#endif // JOYNR_MESSAGING_I_Capabilities_STUB_H_
