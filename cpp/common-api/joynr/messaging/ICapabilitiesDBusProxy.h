/*
* This file was generated by the CommonAPI Generators.
*
*/
#ifndef JOYNR_MESSAGING_I_Capabilities_DBUS_PROXY_H_
#define JOYNR_MESSAGING_I_Capabilities_DBUS_PROXY_H_

#include <joynr/messaging/ICapabilitiesProxyBase.h>
#include <CommonAPI/DBus/DBusFactory.h>
#include <CommonAPI/DBus/DBusProxy.h>

#include <string>

namespace joynr {
namespace messaging {

class ICapabilitiesDBusProxy: virtual public ICapabilitiesProxyBase, virtual public CommonAPI::DBus::DBusProxy {
 public:
    ICapabilitiesDBusProxy(
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection);

    virtual ~ICapabilitiesDBusProxy() { }




    virtual void add(const std::string& domain, const std::string& interfaceName, const std::string& participantId, const types::Types::ProviderQos& qos, const types::Types::EndpointAddressList& endpointAddressList, const types::Types::EndpointAddressBase& messagingStubAddress, const int64_t& timeout_ms, CommonAPI::CallStatus& callStatus);
    virtual std::future<CommonAPI::CallStatus> addAsync(const std::string& domain, const std::string& interfaceName, const std::string& participantId, const types::Types::ProviderQos& qos, const types::Types::EndpointAddressList& endpointAddressList, const types::Types::EndpointAddressBase& messagingStubAddress, const int64_t& timeout_ms, AddAsyncCallback callback);

    virtual void addEndPoint(const std::string& participantId, const types::Types::EndpointAddressBase& messagingStubAddress, const int64_t& timeout_ms, CommonAPI::CallStatus& callStatus);
    virtual std::future<CommonAPI::CallStatus> addEndPointAsync(const std::string& participantId, const types::Types::EndpointAddressBase& messagingStubAddress, const int64_t& timeout_ms, AddEndPointAsyncCallback callback);

    virtual void lookup1(const std::string& domain, const std::string& interfaceName, const types::Types::ProviderQosRequirement& qos, const types::Types::DiscoveryQos& discoveryQos, CommonAPI::CallStatus& callStatus, types::Types::CapabilityEntryList& result);
    virtual std::future<CommonAPI::CallStatus> lookup1Async(const std::string& domain, const std::string& interfaceName, const types::Types::ProviderQosRequirement& qos, const types::Types::DiscoveryQos& discoveryQos, Lookup1AsyncCallback callback);

    virtual void lookup2(const std::string& participandId, const types::Types::DiscoveryQos& discoveryQos, CommonAPI::CallStatus& callStatus, types::Types::CapabilityEntryList& result);
    virtual std::future<CommonAPI::CallStatus> lookup2Async(const std::string& participandId, const types::Types::DiscoveryQos& discoveryQos, Lookup2AsyncCallback callback);

    virtual void remove(const std::string& participantId, const int64_t& timeout_ms, CommonAPI::CallStatus& callStatus);
    virtual std::future<CommonAPI::CallStatus> removeAsync(const std::string& participantId, const int64_t& timeout_ms, RemoveAsyncCallback callback);
    
    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

 private:

};

} // namespace messaging
} // namespace joynr

#endif // JOYNR_MESSAGING_I_Capabilities_DBUS_PROXY_H_
