/*
* This file was generated by the CommonAPI Generators.
*
*/
#ifndef JOYNR_MESSAGING_I_Messaging_H_
#define JOYNR_MESSAGING_I_Messaging_H_

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <CommonAPI/SerializableStruct.h>
#include <CommonAPI/types.h>
#include <joynr/messaging/types/Types.h>
#include <string>

namespace joynr {
namespace messaging {

class IMessaging {
 public:
    virtual ~IMessaging() { }

    static inline const char* getInterfaceId();
    static inline CommonAPI::Version getInterfaceVersion();
    struct JoynrMessage: CommonAPI::SerializableStruct {
        std::string type;
        types::Types::JoynrMessageHeader header;
        std::string payload;
    
        JoynrMessage() = default;
        JoynrMessage(const std::string& type, const types::Types::JoynrMessageHeader& header, const std::string& payload);
    
        virtual void readFromInputStream(CommonAPI::InputStream& inputStream);
        virtual void writeToOutputStream(CommonAPI::OutputStream& outputStream) const;
    
        static inline void writeToTypeOutputStream(CommonAPI::TypeOutputStream& typeOutputStream) {
            typeOutputStream.writeStringType();
            typeOutputStream.beginWriteMapType();
            typeOutputStream.writeStringType();
            typeOutputStream.writeStringType();
            typeOutputStream.endWriteMapType();
            typeOutputStream.writeStringType();
        }
    };
    
};

const char* IMessaging::getInterfaceId() {
    return "joynr.messaging.IMessaging";
}

CommonAPI::Version IMessaging::getInterfaceVersion() {
    return CommonAPI::Version(0, 1);
}

bool operator==(const IMessaging::JoynrMessage& lhs, const IMessaging::JoynrMessage& rhs);
inline bool operator!=(const IMessaging::JoynrMessage& lhs, const IMessaging::JoynrMessage& rhs) {
    return !(lhs == rhs);
}

} // namespace messaging
} // namespace joynr

namespace CommonAPI {

}


namespace std {
}

#endif // JOYNR_MESSAGING_I_Messaging_H_
