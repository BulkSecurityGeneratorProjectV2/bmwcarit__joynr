/*
* This file was generated by the CommonAPI Generators.
*
*/
#include "ICapabilitiesDBusStubAdapter.h"
#include <joynr/messaging/ICapabilities.h>

namespace joynr {
namespace messaging {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createICapabilitiesDBusStubAdapter(
                   const std::string& commonApiAddress,
                   const std::string& interfaceName,
                   const std::string& busName,
                   const std::string& objectPath,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection,
                   const std::shared_ptr<CommonAPI::StubBase>& stubBase) {
    return std::make_shared<ICapabilitiesDBusStubAdapter>(commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection, stubBase);
}

__attribute__((constructor)) void registerICapabilitiesDBusStubAdapter(void) {
    CommonAPI::DBus::DBusFactory::registerAdapterFactoryMethod(ICapabilities::getInterfaceId(),
                                                               &createICapabilitiesDBusStubAdapter);
}

ICapabilitiesDBusStubAdapter::ICapabilitiesDBusStubAdapter(
        const std::string& commonApiAddress,
        const std::string& dbusInterfaceName,
        const std::string& dbusBusName,
        const std::string& dbusObjectPath,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
        const std::shared_ptr<CommonAPI::StubBase>& stub):
        ICapabilitiesDBusStubAdapterHelper(commonApiAddress, dbusInterfaceName, dbusBusName, dbusObjectPath, dbusConnection, std::dynamic_pointer_cast<ICapabilitiesStub>(stub)) {
}

const char* ICapabilitiesDBusStubAdapter::getMethodsDBusIntrospectionXmlData() const {
    return
        "<method name=\"add\">\n"
            "<arg name=\"domain\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"interfaceName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"participantId\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"qos\" type=\"(a(ss)yxib)\" direction=\"in\" />\n"
            "<arg name=\"endpointAddressList\" type=\"a(s)\" direction=\"in\" />\n"
            "<arg name=\"messagingStubAddress\" type=\"(s)\" direction=\"in\" />\n"
            "<arg name=\"timeout_ms\" type=\"x\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"addEndPoint\">\n"
            "<arg name=\"participantId\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"messagingStubAddress\" type=\"(s)\" direction=\"in\" />\n"
            "<arg name=\"timeout_ms\" type=\"x\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"lookup1\">\n"
            "<arg name=\"domain\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"interfaceName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"qos\" type=\"(b)\" direction=\"in\" />\n"
            "<arg name=\"discoveryQos\" type=\"(xixixba{s(ss)})\" direction=\"in\" />\n"
            "<arg name=\"result\" type=\"a(ss(a(ss)yxib)sa(s)b)\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"lookup2\">\n"
            "<arg name=\"participandId\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"discoveryQos\" type=\"(xixixba{s(ss)})\" direction=\"in\" />\n"
            "<arg name=\"result\" type=\"a(ss(a(ss)yxib)sa(s)b)\" direction=\"out\" />\n"
        "</method>\n"
        "<method name=\"remove\">\n"
            "<arg name=\"participantId\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"timeout_ms\" type=\"x\" direction=\"in\" />\n"
        "</method>\n"
    ;
}



static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ICapabilitiesStub,
    std::tuple<std::string, std::string, std::string, types::Types::ProviderQos, types::Types::EndpointAddressList, types::Types::EndpointAddressBase, int64_t>,
    std::tuple<>
    > addStubDispatcher(&ICapabilitiesStub::add, "");

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ICapabilitiesStub,
    std::tuple<std::string, types::Types::EndpointAddressBase, int64_t>,
    std::tuple<>
    > addEndPointStubDispatcher(&ICapabilitiesStub::addEndPoint, "");

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ICapabilitiesStub,
    std::tuple<std::string, std::string, types::Types::ProviderQosRequirement, types::Types::DiscoveryQos>,
    std::tuple<types::Types::CapabilityEntryList>
    > lookup1StubDispatcher(&ICapabilitiesStub::lookup1, "a(ss(a(ss)yxib)sa(s)b)");

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ICapabilitiesStub,
    std::tuple<std::string, types::Types::DiscoveryQos>,
    std::tuple<types::Types::CapabilityEntryList>
    > lookup2StubDispatcher(&ICapabilitiesStub::lookup2, "a(ss(a(ss)yxib)sa(s)b)");

static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ICapabilitiesStub,
    std::tuple<std::string, int64_t>,
    std::tuple<>
    > removeStubDispatcher(&ICapabilitiesStub::remove, "");


template<>
const ICapabilitiesDBusStubAdapterHelper::StubDispatcherTable ICapabilitiesDBusStubAdapterHelper::stubDispatcherTable_ = {
    { { "add", "sss(a(ss)yxib)a(s)(s)x" }, &joynr::messaging::addStubDispatcher },
    { { "addEndPoint", "s(s)x" }, &joynr::messaging::addEndPointStubDispatcher },
    { { "lookup1", "ss(b)(xixixba{s(ss)})" }, &joynr::messaging::lookup1StubDispatcher },
    { { "lookup2", "s(xixixba{s(ss)})" }, &joynr::messaging::lookup2StubDispatcher },
    { { "remove", "sx" }, &joynr::messaging::removeStubDispatcher }
};



} // namespace messaging
} // namespace joynr
