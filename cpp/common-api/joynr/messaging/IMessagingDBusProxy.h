/*
* This file was generated by the CommonAPI Generators.
*
*/
#ifndef JOYNR_MESSAGING_I_Messaging_DBUS_PROXY_H_
#define JOYNR_MESSAGING_I_Messaging_DBUS_PROXY_H_

#include <joynr/messaging/IMessagingProxyBase.h>
#include <CommonAPI/DBus/DBusFactory.h>
#include <CommonAPI/DBus/DBusProxy.h>

#include <string>

namespace joynr {
namespace messaging {

class IMessagingDBusProxy: virtual public IMessagingProxyBase, virtual public CommonAPI::DBus::DBusProxy {
 public:
    IMessagingDBusProxy(
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection);

    virtual ~IMessagingDBusProxy() { }




    virtual void transmit(const IMessaging::JoynrMessage& message, const types::Types::JoynrMessageQos& qos, CommonAPI::CallStatus& callStatus);
    virtual std::future<CommonAPI::CallStatus> transmitAsync(const IMessaging::JoynrMessage& message, const types::Types::JoynrMessageQos& qos, TransmitAsyncCallback callback);
    
    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

 private:

};

} // namespace messaging
} // namespace joynr

#endif // JOYNR_MESSAGING_I_Messaging_DBUS_PROXY_H_
