/*
* This file was generated by the CommonAPI Generators.
*
*/
#include "Types.h"

namespace joynr {
namespace messaging {
namespace types {
namespace Types {

CustomParameter::CustomParameter(const std::string& nameValue, const std::string& valueValue):
        name(nameValue),
        value(valueValue)
{
}

bool operator==(const CustomParameter& lhs, const CustomParameter& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.name == rhs.name &&
        lhs.value == rhs.value
    ;
}

void CustomParameter::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> name;
    inputStream >> value;
}

void CustomParameter::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << name;
    outputStream << value;
}
ProviderQos::ProviderQos(const CustomParameterList& customParametersValue, const int8_t& version1Value, const int64_t& priorityValue, const ProviderScope& scopeValue, const bool& supportsOnChangeSubscriptionsValue):
        customParameters(customParametersValue),
        version1(version1Value),
        priority(priorityValue),
        scope(scopeValue),
        supportsOnChangeSubscriptions(supportsOnChangeSubscriptionsValue)
{
}

bool operator==(const ProviderQos& lhs, const ProviderQos& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.customParameters == rhs.customParameters &&
        lhs.version1 == rhs.version1 &&
        lhs.priority == rhs.priority &&
        lhs.scope == rhs.scope &&
        lhs.supportsOnChangeSubscriptions == rhs.supportsOnChangeSubscriptions
    ;
}

void ProviderQos::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> customParameters;
    inputStream >> version1;
    inputStream >> priority;
    inputStream >> scope;
    inputStream >> supportsOnChangeSubscriptions;
}

void ProviderQos::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << customParameters;
    outputStream << version1;
    outputStream << priority;
    outputStream << scope;
    outputStream << supportsOnChangeSubscriptions;
}
DiscoveryQos::DiscoveryQos(const int64_t& discoveryTimeoutValue, const ArbitrationStrategy& arbitrationStrategyValue, const int64_t& cacheMaxAgeValue, const DiscoveryScope& discoveryScopeValue, const int64_t& retryIntervalValue, const bool& providerMustSupportOnChangeValue, const CustomParameterMap& customParametersValue):
        discoveryTimeout(discoveryTimeoutValue),
        arbitrationStrategy(arbitrationStrategyValue),
        cacheMaxAge(cacheMaxAgeValue),
        discoveryScope(discoveryScopeValue),
        retryInterval(retryIntervalValue),
        providerMustSupportOnChange(providerMustSupportOnChangeValue),
        customParameters(customParametersValue)
{
}

bool operator==(const DiscoveryQos& lhs, const DiscoveryQos& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.discoveryTimeout == rhs.discoveryTimeout &&
        lhs.arbitrationStrategy == rhs.arbitrationStrategy &&
        lhs.cacheMaxAge == rhs.cacheMaxAge &&
        lhs.discoveryScope == rhs.discoveryScope &&
        lhs.retryInterval == rhs.retryInterval &&
        lhs.providerMustSupportOnChange == rhs.providerMustSupportOnChange &&
        lhs.customParameters == rhs.customParameters
    ;
}

void DiscoveryQos::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> discoveryTimeout;
    inputStream >> arbitrationStrategy;
    inputStream >> cacheMaxAge;
    inputStream >> discoveryScope;
    inputStream >> retryInterval;
    inputStream >> providerMustSupportOnChange;
    inputStream >> customParameters;
}

void DiscoveryQos::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << discoveryTimeout;
    outputStream << arbitrationStrategy;
    outputStream << cacheMaxAge;
    outputStream << discoveryScope;
    outputStream << retryInterval;
    outputStream << providerMustSupportOnChange;
    outputStream << customParameters;
}
EndpointAddressBase::EndpointAddressBase(const std::string& endPointAddressValue):
        endPointAddress(endPointAddressValue)
{
}

bool operator==(const EndpointAddressBase& lhs, const EndpointAddressBase& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.endPointAddress == rhs.endPointAddress
    ;
}

void EndpointAddressBase::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> endPointAddress;
}

void EndpointAddressBase::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << endPointAddress;
}
ProviderQosRequirement::ProviderQosRequirement(const bool& notYetImplementedValue):
        notYetImplemented(notYetImplementedValue)
{
}

bool operator==(const ProviderQosRequirement& lhs, const ProviderQosRequirement& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.notYetImplemented == rhs.notYetImplemented
    ;
}

void ProviderQosRequirement::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> notYetImplemented;
}

void ProviderQosRequirement::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << notYetImplemented;
}
CapabilityEntry::CapabilityEntry(const std::string& interfaceNameValue, const std::string& domainValue, const ProviderQos& qosValue, const std::string& participantIdValue, const EndpointAddressList& endpointAdressesValue, const bool& globalValue):
        interfaceName(interfaceNameValue),
        domain(domainValue),
        qos(qosValue),
        participantId(participantIdValue),
        endpointAdresses(endpointAdressesValue),
        global(globalValue)
{
}

bool operator==(const CapabilityEntry& lhs, const CapabilityEntry& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.interfaceName == rhs.interfaceName &&
        lhs.domain == rhs.domain &&
        lhs.qos == rhs.qos &&
        lhs.participantId == rhs.participantId &&
        lhs.endpointAdresses == rhs.endpointAdresses &&
        lhs.global == rhs.global
    ;
}

void CapabilityEntry::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> interfaceName;
    inputStream >> domain;
    inputStream >> qos;
    inputStream >> participantId;
    inputStream >> endpointAdresses;
    inputStream >> global;
}

void CapabilityEntry::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << interfaceName;
    outputStream << domain;
    outputStream << qos;
    outputStream << participantId;
    outputStream << endpointAdresses;
    outputStream << global;
}
JoynrMessageQos::JoynrMessageQos(const int64_t& ttlValue):
        ttl(ttlValue)
{
}

bool operator==(const JoynrMessageQos& lhs, const JoynrMessageQos& rhs) {
    if (&lhs == &rhs)
        return true;

    return
        lhs.ttl == rhs.ttl
    ;
}

void JoynrMessageQos::readFromInputStream(CommonAPI::InputStream& inputStream) {
    inputStream >> ttl;
}

void JoynrMessageQos::writeToOutputStream(CommonAPI::OutputStream& outputStream) const {
    outputStream << ttl;
}

} // namespace Types
} // namespace types
} // namespace messaging
} // namespace joynr
