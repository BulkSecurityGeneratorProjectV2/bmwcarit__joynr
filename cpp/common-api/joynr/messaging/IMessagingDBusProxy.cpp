/*
* This file was generated by the CommonAPI Generators.
*
*/
#include "IMessagingDBusProxy.h"

namespace joynr {
namespace messaging {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createIMessagingDBusProxy(
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection) {
    return std::make_shared<IMessagingDBusProxy>(commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection);
}

__attribute__((constructor)) void registerIMessagingDBusProxy(void) {
    CommonAPI::DBus::DBusFactory::registerProxyFactoryMethod(IMessaging::getInterfaceId(),
       &createIMessagingDBusProxy);
}

IMessagingDBusProxy::IMessagingDBusProxy(
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection):
        CommonAPI::DBus::DBusProxy(commonApiAddress, interfaceName, busName, objectPath, dbusProxyconnection)
 {
}



void IMessagingDBusProxy::transmit(const IMessaging::JoynrMessage& message, const types::Types::JoynrMessageQos& qos, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<IMessaging::JoynrMessage, types::Types::JoynrMessageQos>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "transmit",
        "(sa{ss}s)(x)",
        message, qos, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> IMessagingDBusProxy::transmitAsync(const IMessaging::JoynrMessage& message, const types::Types::JoynrMessageQos& qos, TransmitAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<IMessaging::JoynrMessage, types::Types::JoynrMessageQos>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "transmit",
        "(sa{ss}s)(x)",
        message, qos, 
        std::move(callback));
}

void IMessagingDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 0;
    ownVersionMinor = 1;
}

} // namespace messaging
} // namespace joynr
