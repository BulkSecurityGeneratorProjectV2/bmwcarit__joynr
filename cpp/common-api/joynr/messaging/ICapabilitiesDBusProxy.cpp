/*
* This file was generated by the CommonAPI Generators.
*
*/
#include "ICapabilitiesDBusProxy.h"

namespace joynr {
namespace messaging {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createICapabilitiesDBusProxy(
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection) {
    return std::make_shared<ICapabilitiesDBusProxy>(commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection);
}

__attribute__((constructor)) void registerICapabilitiesDBusProxy(void) {
    CommonAPI::DBus::DBusFactory::registerProxyFactoryMethod(ICapabilities::getInterfaceId(),
       &createICapabilitiesDBusProxy);
}

ICapabilitiesDBusProxy::ICapabilitiesDBusProxy(
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection):
        CommonAPI::DBus::DBusProxy(commonApiAddress, interfaceName, busName, objectPath, dbusProxyconnection)
 {
}



void ICapabilitiesDBusProxy::add(const std::string& domain, const std::string& interfaceName, const std::string& participantId, const types::Types::ProviderQos& qos, const types::Types::EndpointAddressList& endpointAddressList, const types::Types::EndpointAddressBase& messagingStubAddress, const int64_t& timeout_ms, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, std::string, std::string, types::Types::ProviderQos, types::Types::EndpointAddressList, types::Types::EndpointAddressBase, int64_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "add",
        "sss(a(ss)yxib)a(s)(s)x",
        domain, interfaceName, participantId, qos, endpointAddressList, messagingStubAddress, timeout_ms, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> ICapabilitiesDBusProxy::addAsync(const std::string& domain, const std::string& interfaceName, const std::string& participantId, const types::Types::ProviderQos& qos, const types::Types::EndpointAddressList& endpointAddressList, const types::Types::EndpointAddressBase& messagingStubAddress, const int64_t& timeout_ms, AddAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, std::string, std::string, types::Types::ProviderQos, types::Types::EndpointAddressList, types::Types::EndpointAddressBase, int64_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "add",
        "sss(a(ss)yxib)a(s)(s)x",
        domain, interfaceName, participantId, qos, endpointAddressList, messagingStubAddress, timeout_ms, 
        std::move(callback));
}
void ICapabilitiesDBusProxy::addEndPoint(const std::string& participantId, const types::Types::EndpointAddressBase& messagingStubAddress, const int64_t& timeout_ms, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, types::Types::EndpointAddressBase, int64_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "addEndPoint",
        "s(s)x",
        participantId, messagingStubAddress, timeout_ms, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> ICapabilitiesDBusProxy::addEndPointAsync(const std::string& participantId, const types::Types::EndpointAddressBase& messagingStubAddress, const int64_t& timeout_ms, AddEndPointAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, types::Types::EndpointAddressBase, int64_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "addEndPoint",
        "s(s)x",
        participantId, messagingStubAddress, timeout_ms, 
        std::move(callback));
}
void ICapabilitiesDBusProxy::lookup1(const std::string& domain, const std::string& interfaceName, const types::Types::ProviderQosRequirement& qos, const types::Types::DiscoveryQos& discoveryQos, CommonAPI::CallStatus& callStatus, types::Types::CapabilityEntryList& result) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, std::string, types::Types::ProviderQosRequirement, types::Types::DiscoveryQos>,
                                     CommonAPI::DBus::DBusSerializableArguments<types::Types::CapabilityEntryList> >::callMethodWithReply(
        *this,
        "lookup1",
        "ss(b)(xixixba{s(ss)})",
        domain, interfaceName, qos, discoveryQos, 
        callStatus
        , result);
}
std::future<CommonAPI::CallStatus> ICapabilitiesDBusProxy::lookup1Async(const std::string& domain, const std::string& interfaceName, const types::Types::ProviderQosRequirement& qos, const types::Types::DiscoveryQos& discoveryQos, Lookup1AsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, std::string, types::Types::ProviderQosRequirement, types::Types::DiscoveryQos>,
                                     CommonAPI::DBus::DBusSerializableArguments<types::Types::CapabilityEntryList> >::callMethodAsync(
        *this,
        "lookup1",
        "ss(b)(xixixba{s(ss)})",
        domain, interfaceName, qos, discoveryQos, 
        std::move(callback));
}
void ICapabilitiesDBusProxy::lookup2(const std::string& participandId, const types::Types::DiscoveryQos& discoveryQos, CommonAPI::CallStatus& callStatus, types::Types::CapabilityEntryList& result) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, types::Types::DiscoveryQos>,
                                     CommonAPI::DBus::DBusSerializableArguments<types::Types::CapabilityEntryList> >::callMethodWithReply(
        *this,
        "lookup2",
        "s(xixixba{s(ss)})",
        participandId, discoveryQos, 
        callStatus
        , result);
}
std::future<CommonAPI::CallStatus> ICapabilitiesDBusProxy::lookup2Async(const std::string& participandId, const types::Types::DiscoveryQos& discoveryQos, Lookup2AsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, types::Types::DiscoveryQos>,
                                     CommonAPI::DBus::DBusSerializableArguments<types::Types::CapabilityEntryList> >::callMethodAsync(
        *this,
        "lookup2",
        "s(xixixba{s(ss)})",
        participandId, discoveryQos, 
        std::move(callback));
}
void ICapabilitiesDBusProxy::remove(const std::string& participantId, const int64_t& timeout_ms, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, int64_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "remove",
        "sx",
        participantId, timeout_ms, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> ICapabilitiesDBusProxy::removeAsync(const std::string& participantId, const int64_t& timeout_ms, RemoveAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, int64_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "remove",
        "sx",
        participantId, timeout_ms, 
        std::move(callback));
}

void ICapabilitiesDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 0;
    ownVersionMinor = 1;
}

} // namespace messaging
} // namespace joynr
