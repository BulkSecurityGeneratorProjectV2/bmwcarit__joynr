# - Config file for the Joynr package
# It defines the following variables
#   Joynr_EXECUTABLES                  - The Joynr executables.
#   Joynr_RESOURCES_DIR                - Directory containing resource and settings files for Joynr
#                                        executables.
#   Joynr_LIB_COMMON_INCLUDE_DIRS      - Common include directories needed for generated code.
#   Joynr_LIB_COMMON_LIBRARIES         - Common libraries needed for generated code.
#
#   Joynr_LIB_INPROCESS_INCLUDE_DIRS   - Include directories for libJoynr with in-process
#                                        communication.
#                                        This includes also header files needed to build the cluster
#                                        controller.
#   Joynr_LIB_INPROCESS_LIBRARIES      - Libraries needed for libJoynr with in-process
#                                        communication.
#                                        This includes also libraries needed to build the cluster
#                                        controller.
#
#   Joynr_LIB_WS_INCLUDE_DIRS          - Include directories for standalone libJoynr with WebSocket
#                                        communication.
#                                        (without cluster controller)
#   Joynr_LIB_WS_LIBRARIES             - Libraries needed for standalone libJoynr with WebSocket
#                                        communication.
#                                        (without cluster controller)
#
#   Joynr_LIB_DBUS_INCLUDE_DIRS        - Include directories for standalone libJoynr with DBus
#                                        communication.
#                                        (without cluster controller)
#   Joynr_LIB_DBUS_LIBRARIES           - Libraries needed for standalone libJoynr with DBus
#                                        communication.
#                                        (without cluster controller)

# This file is derived from a CMake tutorial (http://www.cmake.org/Wiki/CMake/)
# that is available under Creative Commons Attribution 2.5 Generic (CC BY 2.5, http://creativecommons.org/licenses/by/2.5/). 
# There are no attributions specified by the author.

# Compute paths
get_filename_component(JOYNR_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

set(
    USE_DBUS_COMMONAPI_COMMUNICATION
    @USE_DBUS_COMMONAPI_COMMUNICATION@
)

set(
    USE_PLATFORM_SPDLOG
    @USE_PLATFORM_SPDLOG@
)
set(
    USE_PLATFORM_JSMN
    @USE_PLATFORM_JSMN@
)

# CURL
find_package(CURL REQUIRED)
include(${JOYNR_CMAKE_DIR}/CheckCurlImportTargets.cmake)

# QT5
find_package(Qt5Core REQUIRED)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Qt5Core_EXECUTABLE_COMPILE_FLAGS}")
find_package(Qt5WebSockets)
find_package(Qt5Sql REQUIRED)

# Boost
find_package(Boost 1.56.0 REQUIRED
    COMPONENTS
    system
    thread
)
include(${JOYNR_CMAKE_DIR}/CheckBoostImportTargets.cmake)

find_package(Threads) # sets CMAKE_THREAD_LIBS_INIT

# Our library dependencies (contains definitions for IMPORTED targets)
include(@JoynrConfig_TARGETS_FILE@)

# default configuration
set(
    Joynr_LIB_COMMON_INCLUDE_DIRS
    ${Boost_INCLUDE_DIRS}
    @JoynrConfig_LIB_COMMON_INCLUDE_DIRS@
)

set(
    Joynr_LIB_COMMON_LIBRARIES
    @JoynrConfig_LIB_COMMON_LIBRARIES@
)

if(${USE_PLATFORM_SPDLOG})
    find_package(spdlog REQUIRED)
    get_target_property(spdlog_INCLUDE_DIRS spdlog::spdlog INTERFACE_INCLUDE_DIRECTORIES)
    list(
        APPEND Joynr_LIB_COMMON_INCLUDE_DIRS
        ${spdlog_INCLUDE_DIRS}
    )
endif(${USE_PLATFORM_SPDLOG})

if(${USE_PLATFORM_JSMN})
    find_package(jsmn QUIET)

    # if neither Findjsmn.cmake nor jsmnConfig.cmake is found, try this:
    if(NOT jsmn_FOUND)
        find_path(jsmn_INCLUDE_DIR jsmn.h)
        include(FindPackageHandleStandardArgs)
        find_package_handle_standard_args(jsmn DEFAULT_MSG jsmn_INCLUDE_DIR)
        set(jsmn_FOUND ${JSMN_FOUND} CACHE BOOL "TRUE if jsmn was found, FALSE otherwise")
    endif(NOT jsmn_FOUND)

    if(NOT jsmn_FOUND)
        message(
            FATAL_ERROR
            "could not find jsmn, make sure to install the header file (jsmn.h)"
        )
    endif(NOT jsmn_FOUND)

    list(
        APPEND Joynr_LIB_COMMON_INCLUDE_DIRS
        "${jsmn_INCLUDE_DIR}"
    )

endif(${USE_PLATFORM_JSMN})

set(Joynr_EXECUTABLES)
set(
    Joynr_RESOURCES_DIR
    @JoynrConfig_RESOURCES_DIR@
)

# in-process configuration
set(
    Joynr_LIB_INPROCESS_INCLUDE_DIRS
    "${Qt5Core_INCLUDE_DIRS}"
    "${Qt5Sql_INCLUDE_DIRS}"
    "${Joynr_LIB_COMMON_INCLUDE_DIRS}"
    @JoynrConfig_LIB_INPROCESS_INCLUDE_DIRS@
)

set(
    Joynr_LIB_INPROCESS_LIBRARIES
    "${Qt5Core_LIBRARIES}"
    "${Qt5Sql_LIBRARIES}"
    "${Joynr_LIB_COMMON_LIBRARIES}"
    @JoynrConfig_LIB_INPROCESS_LIBRARIES@
)

# WebSockets configuration
set(
    Joynr_LIB_WS_INCLUDE_DIRS
    "${Joynr_LIB_COMMON_INCLUDE_DIRS}"
    @JoynrConfig_LIB_WS_INCLUDE_DIRS@
)

set(
    Joynr_LIB_WS_LIBRARIES
    "${Joynr_LIB_COMMON_LIBRARIES}"
    @JoynrConfig_LIB_WS_LIBRARIES@
)

# Dbus configuration
if(${USE_DBUS_COMMONAPI_COMMUNICATION})
    set(
        Joynr_LIB_DBUS_INCLUDE_DIRS
        "${Joynr_LIB_COMMON_INCLUDE_DIRS}"
        @JoynrConfig_LIB_DBUS_INCLUDE_DIRS@
    )

    set(
        Joynr_LIB_DBUS_LIBRARIES
        "${Joynr_LIB_COMMON_LIBRARIES}"
        @JoynrConfig_LIB_DBUS_LIBRARIES@
    )
endif(${USE_DBUS_COMMONAPI_COMMUNICATION})

list(
    APPEND Joynr_EXECUTABLES
    @JoynrConfig_INSTALL_BIN_DIR@/cluster-controller
)
