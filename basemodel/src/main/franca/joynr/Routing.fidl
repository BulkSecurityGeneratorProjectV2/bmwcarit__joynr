/*
 * #%L
 * %%
 * Copyright (C) 2011 - 2015 BMW Car IT GmbH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package system

typeCollection RoutingTypes {
	struct Address polymorphic {}

	struct ChannelAddress extends Address {
		String channelId
	}

	struct CommonApiDbusAddress extends Address {
		String domain
		String serviceName
		String participantId
	}

	struct BrowserAddress extends Address {
		String windowId
	}

	enumeration WebSocketProtocol  {
		WS
		WSS
	}

	struct WebSocketAddress extends Address {
		WebSocketProtocol protocol
		String host
		Int32 port
		String path
	}

	struct WebSocketClientAddress extends Address {
		String id
	}
}

<**
	@description: The <code>Routing</code> interface is a joynr internal
		interface. joynr uses a hierarchy of <code>MessageRouter</code>s to
		route messages from source to destination. The <code>Routing</code>
		interface is used to update routing information between parent and
		child <code>MessageRouter</code>s.
**>
interface Routing {

	version {major 0 minor 1}

	<**
		@description: Adds a hop to the parent routing table.
			<br/>
			The overloaded methods (one for each concrete Address type) is
			needed since polymorphism is currently not supported by joynr.
	**>
	method addNextHop {
		in {
			<** @description: the ID of the target participant **>
			String participantId
			<**
				@description: the messaging address of the next hop towards
					the corresponding participant ID
			**>
			RoutingTypes.ChannelAddress channelAddress
		}
	}

	<**
		@description: Adds a hop to the parent routing table.
			<br/>
			The overloaded methods (one for each concrete Address type) is
			needed since polymorphism is currently not supported by joynr.
	**>
	method addNextHop {
		in {
			<** @description: the ID of the target participant **>
			String participantId
			<**
				@description: the messaging address of the next hop towards
					the corresponding participant ID
			**>
			RoutingTypes.CommonApiDbusAddress commonApiDbusAddress
		}
	}

	<**
		@description: Adds a hop to the parent routing table.
			<br/>
			The overloaded methods (one for each concrete Address type) is
			needed since polymorphism is currently not supported by joynr.
	**>
	method addNextHop {
		in {
			<** @description: the ID of the target participant **>
			String participantId
			<**
				@description: the messaging address of the next hop towards
					the corresponding participant ID
			**>
			RoutingTypes.BrowserAddress browserAddress
		}
	}

	<**
		@description: Adds a hop to the parent routing table.
			<br/>
			The overloaded methods (one for each concrete Address type) is
			needed since polymorphism is currently not supported by joynr.
	**>
	method addNextHop {
		in {
			<** @description: the ID of the target participant **>
			String participantId
			<**
				@description: the messaging address of the next hop towards
					the corresponding participant ID
			**>
			RoutingTypes.WebSocketAddress webSocketAddress
		}
	}

	<**
		@description: Adds a hop to the parent routing table.
			<br/>
			The overloaded methods (one for each concrete Address type) is
			needed since polymorphism is currently not supported by joynr.
	**>
	method addNextHop {
		in {
			<** @description: the ID of the target participant **>
			String participantId
			<**
				@description: the messaging address of the next hop towards
					the corresponding participant ID
			**>
			RoutingTypes.WebSocketClientAddress webSocketClientAddress
		}
	}

	<** @description: Removes a hop from the parent routing table. **>
	method removeNextHop {
		in {
			<** @description: the ID of the target participant **>
			String participantId
		}
	}

	<**
		@description: Asks the parent routing table whether it is able to
			resolve the destination participant ID.
	**>
	method resolveNextHop {
		in {
			<** @description: the ID of the target participant to resolve **>
			String participantId
		}
		out {
			<** @description: true, if the participant ID could be resolved **>
			Boolean resolved
		}
	}
}
