/*
 * #%L
 * %%
 * Copyright (C) 2011 - 2014 BMW Car IT GmbH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package system

typeCollection RoutingTypes {
	struct Address {}

	struct ChannelAddress extends Address {
		String channelId
	}

	struct CommonApiDbusAddress extends Address {
		String domain
		String serviceName
		String participantId
	}

	struct BrowserAddress extends Address {
		String windowId
	}

	enumeration WebSocketProtocol  {
        WS
        WSS
    }

	struct WebSocketAddress extends Address {
		WebSocketProtocol protocol
		String host
		Int32 port
		String path
	}
	
	struct WebSocketClientAddress extends Address {
		String id
	}
}

/**
 * The <code>Routing</code> interface is a joynr internal interface. joynr uses
 * a hierarchy of <code>MessageRouter</code>s to route messages from source to
 * destination. The <code>Routing</code> interface is used to update routing
 * information between parent and child <code>MessageRouter</code>s.
 */
interface Routing {

	version {major 0 minor 1}

	/**
	 * Adds a hop to the parent routing table.
	 *
	 * The overloaded methods (one for each concrete Address type) is needed
	 * since polymorphism is currently not supported by joynr.
	 *
	 * @param participantId the ID of the target participant
	 * @param messagingAddress the messaging address of the next hop towards the corresponding participant ID
	 */
    method addNextHop {
        in {
            String participantId
            RoutingTypes.ChannelAddress channelAddress
        }
    }

    /**
     * Adds a hop to the parent routing table.
     *
     * The overloaded methods (one for each concrete Address type) is needed
     * since polymorphism is currently not supported by joynr.
     *
     * @param participantId the ID of the target participant
     * @param messagingAddress the messaging address of the next hop towards the corresponding participant ID
     */
    method addNextHop {
        in {
            String participantId
            RoutingTypes.CommonApiDbusAddress commonApiDbusAddress
        }
    }

    /**
     * Adds a hop to the parent routing table.
     *
     * The overloaded methods (one for each concrete Address type) is needed
     * since polymorphism is currently not supported by joynr.
     *
     * @param participantId the ID of the target participant
     * @param messagingAddress the messaging address of the next hop towards the corresponding participant ID
     */
    method addNextHop {
        in {
            String participantId
            RoutingTypes.BrowserAddress browserAddress
        }
    }

    /**
     * Adds a hop to the parent routing table.
     *
     * The overloaded methods (one for each concrete Address type) is needed
     * since polymorphism is currently not supported by joynr.
     *
     * @param participantId the ID of the target participant
     * @param messagingAddress the messaging address of the next hop towards the corresponding participant ID
     */
    method addNextHop {
        in {
            String participantId
            RoutingTypes.WebSocketAddress webSocketAddress
        }
    }

	/**
	 * Removes a hop from the parent routing table.
	 *
	 * @param participantId the ID of the target participant
	 */
    method removeNextHop {
        in {
            String participantId
        }
    }

	/**
	 * Asks the parent routing table whether it is able to resolve the 
	 * destination participant ID.
	 *
	 * @param participantId the ID of the target participant to resolve
	 * @return true, if the participant ID could be resolved
	 */
	method resolveNextHop {
		in {
			String participantId
		}
		out {
			Boolean resolved
		}
	}
}
