/*
 * #%L
 * %%
 * Copyright (C) 2011 - 2017 BMW Car IT GmbH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package infrastructure

import types.* from "DiscoveryTypes.fidl"

<**
	@description: The GlobalCapabilitiesDirectory is a joynr
	internal interface. The joynr framework uses it to register
	providers, which are available at a global scope, with the backend.
	A provider is registered along with parameters which will be used
	during the arbitration process to select a suitable provider for
	a proxy. These information are stored in GlobalDiscoveryEntry objects.
	@see: GlobalDiscoveryEntry
**>
interface GlobalCapabilitiesDirectory{

	version {major 0 minor 2}

	<**
		@description: Registers several providers with the backend. The providers are registered with the same GBID
		as the Global Capabilities Directory instance which received this call.
	**>
	method add {
		in {
			<**
				@description: A list which stores information about each provider instance
				that shall be registered with the backend.
				@see: GlobalDiscoveryEntry
			**>
			GlobalDiscoveryEntry[] globalDiscoveryEntries
		}
	}

	<** @description: Registers a single provider with the backend. The providers are registered with the same GBID
        as the Global Capabilities Directory instance which received this call. **>
	method add {
		in {
			<**
				@description: Information about the provider which shall be registered with
				the backend.
				@see: GlobalDiscoveryEntry
			**>
			GlobalDiscoveryEntry globalDiscoveryEntry
		}
	}

	<** @description: Registers a single provider in the defined global Backends **>
	method add {
		in {
			<**
				@description: Information about the provider which shall be registered with
				the backend. The reference to the GBIDs in the address field of the Global Discovery Entry is not
				taken into account.
				@see: GlobalDiscoveryEntry
			**>
			GlobalDiscoveryEntry globalDiscoveryEntry

			<**
				@description: Global Backend IDs for which the provider is registered.
			**>
			String[] gbids
		}
	}



	<**
		@description: Looks up a list of providers for a domain and an interface name. The domain
		and interface name correspond to the attributes stored in GlobalDiscoveryEntry. The providers returned are
		registered to the same GBID as the Global Capabilities Directory instance which received this call.
		@see: GlobalDiscoveryEntry
	**>
	method lookup {
		in {
			<** @description: Domain names for which providers shall be returned. **>
			String[] domains
			<** @description: The name of the requested provider interface. **>
			String interfaceName
		}

		out {
			<** @description: Information about all providers which were found for the given
			domain and interface name.
			**>
			GlobalDiscoveryEntry[] result
		}
	}

	<**
		@description: Looks up a provider for a given participant Id. The providers returned are
        registered to the same GBID as the Global Capabilities Directory instance which received this call.
	**>
	method lookup {
		in {
			<** @description: The participant Id which identifies the requested provider. **>
			String participantId
		}
		out{
			<** @description: Information about the found provider. **>
			GlobalDiscoveryEntry result
		}
	}

		<**
    		@description: Looks up a provider for a given participant Id. In case a single provider identified by the
    		provided participantId is registered in multiple Backends, only one GlobalDiscoveryEntry of that provider
    		in a single backend will be returned.
    	**>
    	method lookup {
    		in {
    			<** @description: The participant Id which identifies the requested provider. **>
    			String participantId

    			<**
    				@description: Global Backend IDs for which providers should be returned. Only Providers from
    				the provided Global Backends will be returned
    			**>
    			String[] gbids
    		}
    		out{
    			<** @description: Information about the found provider. **>
    			GlobalDiscoveryEntry result
    		}
    	}


    <**
        @description: Looks up a list of providers for a domain and an interface name. The domain
        and interface name correspond to the attributes stored in GlobalDiscoveryEntry. Only one provider per
        participantId is returned. In case a single provider is registered in multiple Backends, only one
        GlobalDiscoveryEntry of that provider in a single backend will be returned.
        @see: GlobalDiscoveryEntry
	**>
	method lookup {
		in {
			<** @description: Domain names for which providers shall be returned. **>
			String[] domains
			<** @description: The name of the requested provider interface. **>
			String interfaceName

			<**
				@description: Global Backend IDs for which providers should be returned. Only Providers from
				the provided Global Backends will be returned
			**>
			String [] gbids

		}

		out {
			<** @description: Information about all providers which were found for the given
			domain and interface name.
			**>
			GlobalDiscoveryEntry[] result
		}
	}



	<**
		@description: Unregisters providers from the backend.
	**>
	method remove {
		in {
			<**
				@description: The participand Ids which identify the providers that shall be removed
				from the backend.
			**>
			String[] participantIds
		}
	}

	<**
		@description: Unregisters a provider from the backend.
	**>
	method remove {
		in {
			<**
				@description: The participant Id which identifies the provider that shall be removed
				from the backend.
			**>
			String participantId
		}
	}

	<**
		@description: Updates the last seen date for a specific cluster controller.
	**>
	method touch {
		in {
			<**
				@description: Identifies the cluster controller for which the last
				seen date shall be updated.
			**>
			String clusterControllerId
		}
	}

	<**
		@description: Event that is fired when a new global discovery
			entry is added or an existing entry is changed or removed.
			The event includes the affected global discovery entry as well
			as the type of change.
			MULTICAST PARTITIONS:
			This event is broadcasted using the following partition structure:
			<domain> / <interface>
	**>
	broadcast globalDiscoveryEntryChanged {
		out {
			ChangeType typeOfChange
			GlobalDiscoveryEntry globalDiscoveryEntry
		}
	}
}
