/*
 * #%L
 * %%
 * Copyright (C) 2011 - 2013 BMW Car IT GmbH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package vehicle

import types.Localisation.* from "LocalisationTypes.fidl"

interface NavigationPrimitive {

	version {major 0 minor 1}

	method requestGuidance {
		in {
			GpsLocation location
		}
		out {
			Boolean result
		}
	}
}
/**
 * The <code>Navigation</code> interface describes access to the navigation system inside the car.
 * The navigation system stores a list of <code>{@link Trip}</code>s. A trip could be activated and
 * used for guidance.
 */
interface Navigation{

	version {major 0 minor 1}

	/**
	 * Indicates if there is a active trip that is currently used for guidance.
	 */
	attribute Boolean guidanceActive readonly // NOTIFYREADONLY
	/**
	 * The currently active used for guidance, or null if there is no active trip.
	 */
	attribute Trip guidedTrip readonly // NOTIFYREADONLY
	/**
	 * The status of the active trip currently used for guidance.
	 */
	attribute Trip[] trips // NOTIFYREADWRITE
	
	/**
	 * Adds a new trip to the CIC.
	 * @param trip the trip to add.
	 * @return the trip handle generated by the CIC.
	 */
	method addTrip {
		in {
			Trip trip
		}
	}
	
	/**
	 * Updates a trip in the CIC. Note: the local trip ID might change.
	 * @param trip the trip to add.
	 * @return the trip handle generated by the CIC.
	 */
	method updateTrip {
		in {
			Trip trip
		}
	}
	
	/**
	 * Deletes the trip with the specified trip ID.
	 * @param tripID the trip to delete.
	 */
	method deleteTrip {
		in {
			String tripId
		}
	}
	
		
	/**
	 * Deletes all trips at the server.
	 */
	method deleteAll {}
	
	/**
	 * Get the current list of saved Trips 
	 */
	method getSavedTrips {
		out {
			Trip[] result
		}
	}
	
	/**
	 * Request the guidance for the submitted trip
	 * @param the trip which shall be guided
	 * @return true if the request has been performed successfully
	 */
	method requestGuidance {
		in {
			Trip trip
		}
		
		out {
			Boolean result
		}
	}
		
	/**
	 * Stops the current guidance (if exists)
	 * @return true if the request has been performed successfully
	 */
	method stopGuidance {
		out {
			Boolean result
		}
	}

	broadcast locationUpdate {
		out {
			GpsLocation location
		}
	}

	broadcast locationUpdateWithSpeed {
		out {
			GpsLocation location
			Float currentSpeed
		}
	}

	<**
		@description: Selective broadcast with one output parameter
		@param: country Only update location when in this country
		@param: startTime Start update at this time
		@param: endTime End update at this time
	**>
	broadcast locationUpdateSelective selective {
		out {
			GpsLocation location
		}
	}

	<**
		@description: Selective broadcast with multiple output parameters
		@param: country Only update location when in this country
		@param: startTime Start update at this time
		@param: endTime End update at this time
	**>
	broadcast locationUpdateWithSpeedSelective selective {
		out {
			GpsLocation location
			Float currentSpeed
		}
	}
	
}