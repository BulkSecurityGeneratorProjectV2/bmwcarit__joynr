/*
 * #%L
 * %%
 * Copyright (C) 2011 - 2015 BMW Car IT GmbH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

package vehicle

import datatypes.exampleTypes.* from  "datatypes.fidl"

typeCollection radiotypes {
	struct RadioStation {
		String name
		ByteBuffer byteBuffer
	}
	enumeration ErrorList {
		EXAMPLE_ERROR_1
		EXAMPLE_ERROR_2
	}

	/* only used within TestLibjoynr */
	struct DatatypeForTestLibjoynr {
		String name
	}

	typedef TypeDefForPrimitive is UInt16
	typedef TypeDefForStruct is RadioStation
}

<** @description : "This is a description about the radio interface" **>
interface Radio {
	attribute radiotypes.DatatypeForTestLibjoynr attributeTestingProviderInterface readonly

	/**
	 * This attribute is subscribe-able and a getIsOn() and setIsOn(bool on)
	 * is generated.
	 */
	attribute Boolean isOn

	attribute Int32 numberOfStations

	attribute String mixedSubscriptions

	attribute Boolean attrProvidedImpl

	attribute Country enumAttribute

	attribute Country[] enumArrayAttribute

	attribute ByteBuffer byteBufferAttribute

	attribute StringMap stringMapAttribute

	attribute Int32 failingSyncAttribute readonly

	attribute Int32 failingAsyncAttribute readonly

	attribute radiotypes.TypeDefForStruct typeDefForStruct

	attribute radiotypes.TypeDefForPrimitive typeDefForPrimitive
	/**
	 * An operation with return value and parameters.
	 */
	method addFavoriteStation {
		in {
			String radioStation
		}
		out {
			Boolean returnValue
		}
		error radiotypes.ErrorList
	}

	method addFavoriteStation {
		in {
			radiotypes.RadioStation radioStation
		}
		out {
			Boolean returnValue
		}
	}

	method methodProvidedImpl {
		in {
			String arg
		}
		out {
			String returnValue
		}
	}

	method methodWithByteBuffer{
		in {
			ByteBuffer input
		}
		out {
			ByteBuffer result
		}
	}

	method  methodWithTypeDef{
		in {
			radiotypes.TypeDefForStruct typeDefStructInput
			radiotypes.TypeDefForPrimitive typeDefPrimitiveInput
		}
		out {
			radiotypes.TypeDefForStruct typeDefStructOutput
			radiotypes.TypeDefForPrimitive typeDefPrimitiveOutput
		}
	}

	method operationWithEnumsAsInputAndOutput {
		in {
			Country enumInput
			Country[] enumArrayInput
		}
		out {
			Country enumOutput
		}
	}

	method operationWithEnumsAsInputAndEnumArrayAsOutput {
		in {
			Country enumInput
			Country[] enumArrayInput
		}
		out {
			Country[] enumOutput
		}
	}

	method operationWithMultipleOutputParameters {
		in {
			Country[] enumArrayInput
			Country enumInput
			String stringInput
			Boolean syncTest
		}
		out {
			Country[] enumArrayOutput
			Country enumOutput
			String stringOutput
			Boolean booleanOutput
		}
	}

	method triggerBroadcasts {
		in {
			String broadcastName
			UInt32 times
		}
	}

	broadcast broadcastWithEnum {
		out {
			Country enumOutput
			Country[] enumArrayOutput
		}
	}

	broadcast broadcastWithTypeDefs {
		out {
			radiotypes.TypeDefForStruct typeDefStructOutput
			radiotypes.TypeDefForPrimitive typeDefPrimitiveOutput
		}
	}

	method methodWithSingleArrayParameters {
		in {
			Double[] doubleArrayArg
		}
		out {
			String[] stringArrayOut
		}
	}
	/**
	 * When this event is triggered, details about the radio
	 * station will be included.
	 */
	broadcast weakSignal {
		out {
		  String radioStation
		  ByteBuffer byteBuffer
		}
	}
}
