@startuml

[-> MessageRouter : "route(BroadcastSubscriptionRequest)"
MessageRouter -> InProcessLibJoynrMessagingSkeleton : transmit
InProcessLibJoynrMessagingSkeleton -> Dispatcher : receive

note over Dispatcher
	"Task scheduled here"
end note
Dispatcher -> ThreadPool : execute

ThreadPool ->> ReceivedMessageRunnable : "run <b>(Thread switched)</b>"
ReceivedMessageRunnable -> Dispatcher : handleBroadcastSubscriptionRequestReceived

alt "Target provider not registered"
	Dispatcher -> PublicationManager : add
	PublicationManager -> PublicationManager : queueBroadcastSubscriptionRequest
	note over PublicationManager
		"Dispatcher::addRequestCaller calls PublicationManager::restore
		 which uses the queue to finalize the registration"
	end note
else
	Dispatcher -> PublicationManager : add
	alt "Publication exists"
		PublicationManager -> RequestCaller : unregisterBroadcastListener
		RequestCaller -> AbstractJoynrProvider : unregisterBroadcastListener

		note over PublicationManager
			"Task unscheduled here"
		end note

		PublicationManager -> DelayedScheduler : unschedule(PublicationEndRunnable)
	end
	PublicationManager -> RequestCaller : registerBroadcastListener
	RequestCaller -> AbstractJoynrProvider : registerBroadcastListener
	alt "Subscription not expired"
		note over PublicationManager
			"Task scheduled here"
		end note
		PublicationManager -> DelayedScheduler : "schedule(PublicationEndRunnable)"
	end
end

== PublicationEndRunnable ==

DelayedScheduler ->> PublicationEndRunnable : "run <b>(Thread switched)</b>"
PublicationEndRunnable -> PublicationManager : removePublication

note over PublicationManager
	"Broadcast case. Subscription path omitted"
end note

PublicationManager -> RequestCaller : unregisterBroadcastListener

note over PublicationManager
	"Task unscheduled here"
end note

PublicationManager -> DelayedScheduler : "unschedule(PublicationEndRunnable)"

@enduml
