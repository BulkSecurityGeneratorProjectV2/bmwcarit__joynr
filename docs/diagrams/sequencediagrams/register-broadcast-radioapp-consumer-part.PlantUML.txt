@startuml

[-> RadioProxy : subscribeToNewStationDiscoveredBroadcast
RadioProxy -> RadioJoynrMessagingConnector : subscribeToNewStationDiscoveredBroadcast
RadioJoynrMessagingConnector -> SubscriptionManager : registerSubscription

alt "Subscription exists"
	note over SubscriptionManager
		"Task unscheduled here"
	end note
	SubscriptionManager -> SubscriptionManager : "unschedule(SubscriptionEndRunnable)"
	SubscriptionManager -> SubscriptionManager : "unschedule(MissedPublicationRunnable)"
end

note over SubscriptionManager
	"Task scheduled below"
end note

alt "alert interval > 0 && periodic publication interval > 0"
	SubscriptionManager -> DelayedScheduler : "schedule(MissedPublicationRunnable)"
else
	SubscriptionManager -> DelayedScheduler : "schedule(SubscriptionEndRunnable)"
end

RadioJoynrMessagingConnector -> JoynrMessageSender : sendBroadcastSubscriptionRequest
JoynrMessageSender -> MessageRouter : "route(BroadcastSubscriptionRequest)"

note over MessageRouter
	"At the moment there
	is no reply (will be change)"
end note

== SubscriptionEndRunnable ==

DelayedScheduler ->> SubscriptionEndRunnable : "run <b>(Thread switched)</b>"
SubscriptionEndRunnable -> SubscriptionManager : unregisterSubscription
note over SubscriptionManager
	"Task unscheduled here"
end note
SubscriptionManager -> DelayedScheduler : "unschedule(SubscriptionEndRunnable)"
SubscriptionManager -> DelayedScheduler : "unschedule(MissedPublicationRunnable)"

== MissedPublicationRunnable ==

DelayedScheduler ->> MissedPublicationRunnable : "run <b>(Thread switched)</b>"
alt "Publication not in time"
	MissedPublicationRunnable -> ISubscriptionCallback : onError
end
MissedPublicationRunnable -> DelayedScheduler : "schedule(MissedPublicationRunnable)"

@enduml
