/*
 * #%L
 * %%
 * Copyright (C) 2011 - 2017 BMW Car IT GmbH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package tests.robustness

typeCollection {

    struct MySubscriptionContainer {
        String name
        Boolean data1
    }
}

<**
        @description: #noVersionGeneration
**>
interface TestInterface {
        version { major 0 minor 1 }

        // ATTRIBUTES
        attribute String attributeString
        attribute String attributeString1
        attribute String attributeString2

        attribute MySubscriptionContainer subContainer readonly

        // METHODS
        method methodWithStringParameters {
                in {
                        String stringArg
                }
                out {
                        String stringOut
                }
        }

        method methodWithStringParameters1 {
                in {
                        String stringArg
                }
                out {
                        String stringOut
                }
        }

        method methodWithStringParameters2 {
                in {
                        String stringArg
                }
                out {
                        String stringOut
                }
        }

        method methodWithDelayedResponse {
                in {
                        Int32 delayArg
                }
                out {
                        String stringOut
                }
        }

        method methodToFireBroadcastWithSingleStringParameter {
        }

        method startFireBroadcastWithSingleStringParameter {
        }

        method stopFireBroadcastWithSingleStringParameter {
        }

        method ping {
        }

        // BROADCASTS
        broadcast broadcastWithSingleStringParameter {
                out {
                        String stringOut
                }
        }

        broadcast broadcastWithClassParameter1 {
                out {
                        <**
                                @description: container class for broadcastWithClassParameter1
                        **>
                        MySubscriptionContainer subscriptionContainer1
                }
        }

        broadcast broadcastWithClassParameter2 {
                out {
                        <**
                                @description: container class for broadcastWithClassParameter2
                        **>
                        MySubscriptionContainer subscriptionContainer2
                }
        }

        broadcast broadcastSelectiveWithSingleStringParameter1 selective {
                out {
                        String stringOut
                }
        }

        broadcast broadcastSelectiveWithSingleStringParameter2 selective {
                out {
                        String stringOut
                }
        }
}
